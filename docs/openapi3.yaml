openapi: 3.0.1
info:
  title: Common Storage Service
  description: An Elasticsearch generic service for common usecases.
  version: 1.0.0
servers:
  - url: http://localhost:80/
paths:
  /indexes:
    get:
      tags:
        - indexes
      summary: Get all indexes from the database.
      responses:
        200:
          description: All indexes.
        404:
          description: No indexes in the database.
        400:
          description: Invalid request, could not retrieve indexes.
    post:
      tags:
        - indexes
      summary: Create a new index and returns it.
      requestBody:
        description: The properties that need to be sent.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexes'
        required: true
      responses:
        200:
          description: Returns the created index.
        400:
          description: Invalid request, could not create index.
          
  /indexes/{name}:
    get:
      tags:
        - indexes
      summary: Get a specific index.
      parameters: 
      -  $ref: '#/components/parameters/nameParameter'
      responses:
        200:
          description: Information about the index.
        404:
          description: Index not found.
        400: 
          description: Invalid request, could not retrieve index.
    delete:
      tags:
        - indexes
      summary: Delete the specific index and returns it.
      parameters: 
      - name: name
        in: path
        description: The name of the required index.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Information about the deleted index.
        404:
          description: Index not found, did not delete.
        400: 
          description: Invalid request, could not retrieve index.        
          
  /indexes/{name}/document:
   get:
      tags:
        - indexes
      summary: Get documents from specific index.
      parameters: 
      -  $ref: '#/components/parameters/nameParameter'
      - in: query
        name: params
        required: false
        schema:
          type: object
          additionalProperties: {}
        example:
          user_id: 123456
      responses:
        200:
          description: All documents matching the criteria. If not supplied, returns all documents.
        404:
          description: Index not found.
        400: 
          description: Invalid request, could not retrieve index.     
   post:
    tags:
      - indexes 
    summary: Create a new document in the index.
    requestBody:
        description: Example of request body input
        required: true  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/documents'
    parameters:
    - $ref: '#/components/parameters/nameParameter'
    responses:
      200:
        description: Creates the document and returns it.
      404:
        description: Index not found, did not create document.
      400: 
          description: Invalid request, could not retrieve index.      

  /indexes/{name}/document/{documentId}:
    delete:
      tags:
      - indexes
      summary: Deletes a specific document.
      parameters:
      - name: documentId
        in: path
        required: true
        description: ID of the document to delete.
        schema:
          type: string
      - $ref: '#/components/parameters/nameParameter'
      responses:
        200:
          description: Creates the document and returns it.
        404:
          description: Index not found, did not create document.
        400: 
            description: Invalid request, could not retrieve index.      
    
components:
  parameters:
    nameParameter:
      name: name
      in: path
      description: Name of the index
      required: true
      schema:
        type: string
  schemas:
    indexes:
      properties:
        index:
          type: string
      example:
        index: test
    documents:
      properties:
        body:
          type: object
      example:
        body: { firstName: "Moshe", lastName: "Shalom" }  
